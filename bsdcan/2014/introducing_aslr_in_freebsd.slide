Implementing ASLR in FreeBSD
BSDCan
17 May 2014
Tags: FreeBSD, ASLR, Security, grsec, pax

Shawn "lattera" Webb
SoldierX
lattera@gmail.com
https://www.soldierx.com/
@lattera

* About the Author
- Fan of opensource
- FreeBSD and ZFS fanboy
- Passionate about security
- Submitted patches to FreeBSD
- Maintainer of a few FreeBSD ports
- Author of libhijack: runtime process infection made easy on Linux and FreeBSD

Disclaimer: opinions, ideas, thoughts, etc are mine, not my employer's

.image new_sx_logo_v2.png 150 150

* Agenda
- Definitions
- History of ASLR (according thusly to ye olde Wikipedia)
- FreeBSD's security strengths
- FreeBSD's security weaknesses
- Learning from others
- How ASLR is implemented
- How to use ASLR on FreeBSD
- Further research/work
- Live demo

* Definitions
- Security: What Sony and Mt Gox have in common: they suck at it. Ever-increasing layers of an onion that make everyone tear up.
- Exploit mitigation: a method or technique to prevent the sucessful exploitation of security vulnerabilities.
- ASLR - Address Space Layout Randomization: An exploit mitigation technique by which the memory mappings of a given process are placed in random locations.

What ASLR helps protect against:
- Buffer overflows
- ret2libc attacks
- Essentially, low-level security vulnerabilities

What ASLR doesn't help protect against:
- SQL injection
- System configuration oopsies
- Essentially, higher-level security vulnerabilities

* History of ASLR
- July 2001: One or more talented persons, known as the PaX team, created a patch to the Linux kernel implementing ASLR.
- 2004: OpenBSD starts work on implementing ASLR. Gets everything except for execbase randomization (Position Independent Executables).
- June 2005: Linux rips PaX's ASLR, dumbing it down and calling it secure.
- 2007: Windows Vista introduces ASLR. Major problems with their implementation, even today.
- 2008: OpenBSD completes ASLR implementation with PIE support.
- 2011: ASLR introduced in Solaris 11

Thank you Wikipedia University!

* FreeBSD's Security Strengths

Mostly based on policies:

- MAC framework
- NFSv4 and Posix ACLs
- Securelevel
- auditdistd
- Jails (and soon/now: bhyve)

Non-policy technologies:

- Non-exec stack
- ptrace restriction

* FreeBSD's Security Weaknesses

- Only one exploit mitigation technology: non-exec stack
- No PIE support in base
- No ASLR
- The many features of grsec

* Learning From Others
Linux:
- Hooray politics!
- If you rip off PaX and grsec, make your rip off less secure, claim it to be more secure, you're gonna have a bad time.
- Only one knob: turn ASLR on and off for the whole system
- Weak. Linux's ASLR has many weaknesses.

Windows:
- Overall a pretty decent technical implementation
- BIIIIIG problem: individual EXEs and DLLs can have ASLR turned on or off

* How ASLR is Implemented - High-Level Details
- Per-jail settings
- Knobs:
  security.pax.aslr.status: 1
  security.pax.aslr.debug: 0
  security.pax.aslr.mmap_len: 16
  security.pax.aslr.stack_len: 12
  security.pax.aslr.exec_len: 21
  security.pax.aslr.compat.status: 1
  security.pax.aslr.compat.mmap_len: 8
  security.pax.aslr.compat.stack_len: 6
  security.pax.aslr.compat.exec_len: 6
- What about applications that don't support ASLR? (exhibit crashes, proprietary/can't compile, etc.)
- Knobs can be set per-jail. Set up a jail with ASLR turned off in just that jail. Jail the misbehaving application.

* References

General ASLR:

.link http://pax.grsecurity.net/
.link https://en.wikipedia.org/wiki/Address_space_layout_randomization

OSX:

.link http://blog.azimuthsecurity.com/2014/03/attacking-ios-7-earlyrandom-prng.html

Windows:

.link http://cansecwest.com/slides/2013/DEP-ASLR%20bypass%20without%20ROP-JIT.pdf
.link http://labs.bromium.com/2014/02/24/bypassing-emet-4-1/

Linux:

.link http://danigargu.blogspot.com/2013/01/having-fun-with-rop-nxaslr-bypass-linux_18.html
